Programming?


Python

C / C++

Java -> Data Science, Android, Web Developer, Enterprise application developer

------------------------------------------------------------------------------------------------------

JavaScript


JSE - Java Standard Edition  (Standalone)  (Core Java + JDBC)
JEE - Java Enterprise Edition 
JME - Java Micro Edition

Java Programming language and Platform:

Operating System:

	- It is an interface between user and hardware of the computer

		Windows, Linux, Mac

Java - HAL (Hardware abstract layer)  ( Software based platform)

Platform Independent:

c, c++ , Java 

------------------------------------------------------------
#include<stdio.h>

void main(){
	print("Welcome to c world");
}
------------------------------------------------------------

#include<stdio.h>

void main(){
	cout << "Welcome to c++ world";
}

---------------------------------------------------------------
public class HelloWorld{
	public static void maint(String args[]){
		System.out.println("Welcome to Java world");
	}
}
--------------------------------------------------------------

Compilers: tubro c,turbo c++, gcc, javac

windows: fact.obj, fact.exe
linux : fact.sh

javac => Intermediate code ( byte code )   .class 

javac one.java => one.class (byte code) = JVM (Java Vitural Machine) 

compiler => convert into what machine can understand (0, 1)

- Procedure oriented
- Object Oriented 
- Funcational Programming



https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html


Java software:

JDK  -> Java Development Kit  (Developer)
	compiler,debugger and other tools to develop application 

JRE  -> Java Runtime Environment
	to run application which developed using JDK 


Java programms:

1. File must saved with .java extension 
2. javac ( to compile)
3. java


Installation of Java
--------------------------------------------------------------------------------
JAVA_HOME = C:\Program Files\Java\jdk1.8.0_231\
path = C:\Program Files\Java\jdk1.8.0_231\bin\
classpath = C:\Program Files\Java\jdk1.8.0_231\lib\

HelloWorld.java

javac HelloWorld.java => HelloWorld.class  ( Byte code ) => java HelloWorld


Variables:

The name given to the memory location is called variable

Comments:

// Single 
/* ---------  */ Multiline 
/** ----------- */


/* Write program to find given number is even or odd */

 +  = a + b; 
 -  = a - b;
 *  = a * b;
 /  = a / b;
 %  = a % b;

------------------------------------------------------------------------------------------------------

1. What is the extension of "Java Programm"? .java
2. What is the command is used to compile java program ? javac
3. What is the command to execute java program ? java
4. When you compile java program it generate .class file, 
	what code does your .class contains ?  (byte code)
5. JDK stands ? 
	Java Development Kit
6. What JDK contains?
   It contains compiler,debuggers and tools to develop the application
7. What is JRE?
   Java Runtime Environment, which contains tools,libraries to run the java application
8. What is main method signature in java?
	public static void main(String args[]){}
9. How many primitive data types are there in java ? 8
10. What are the primitive data types?
	byte
	short
	int
	char
	float
	double
	long
	boolean
11. What is variable?
	Name given to the memory location is called variable

12. How many types of comments in java available?
	3 
	//
	/* */
	/** */
13. How do you generate documentation in java ?
	javadoc *.java

14. Digramatic represention of the logic is called?
	flow chart



java Hello




------------------------------------------------------------------------------------------


IDE (Integrated Development Environment)

eclipse.org/downloads/download.php?file=/oomph/epp/2019-12/R/eclipse-inst-win64.exe


-------------------------------------------------------------------------------------------

variable   
	int age = 36
	System.out.println(age);
	
	int sum_of_ages;
	int person_3_age;
	int person3age;
	int 3personage; Not valid  ( Letter, _ , $)

	int boolean ; Not valid 


method
	public int sum(int a, int b){

	}
class
	class Employee{

	}
interface
	interface PrintService{

	}

------------------------------------------------------------------------------------------------

short
byte
char
int
float
long
double
boolean

--------------------------------------
class
interface
implements
extends
--------------------------------------
if
else
while
switch
break
case
return
continue
-----------------------------------
try
catch
throw
throws
finally
-------------
private
public
protected

--------------------------------------------

Data types:

Primitive: short, byte, int , char, boolean, long, float, double
Reference: Arrays, String, Employee



---------------------------------------------------------------------------------------------------
Binary = +, -, *, /, %
Unaray = ++, -- 

----------------------------------------------------------------------------------------------------
Relational Operator

<
<=
>
>=
==
!=


a < b

----------------------------------------------------------------------------------------------------

sequential order:

int a = 10;
int b = 20;
int c = 30;
sum = a + b + c;


Conditional  => if, else, if-else 
Iterative   => for, while, do-while
Selction statements => switch

------------------------------------------------------------------------------------------------------
Conditional Statements :

if

if-else

if-else-if


------------------------------------------------------------------------------------------------------

Accept a number from the user then print the number ( if it negative +)

if(expression){
    // Code
}


Accept bill amount from the user, if amount > 1000 give a discount of 10%

------------------------------------------------------------------------------------------------------

Accept salary from user if salary amount is <= 15000 give bonus 20%

-----------------------------------------------------------------------------------------------------

if - else

if(expression){
  //Code
}else{
  // Code
}


-----------------------------------------------------------------------------------------------------

Accept number from the user and check wheather it is even or odd

num % 2 == 0


-----------------------------------------------------------------------------------------------------

>= 55  (100)
   
pass
fail
-----------------------------------------------------------------------------------------------------

if-else-if

num1 = ? 
num2 = ?
num3 = ?

-----------------------------------------------------------------------------------------------------
Score and grading:

<35 "Fail"
35 - 50 "C"
50 - 70 "B"
70 - 90 "A"
90 - 100 "A+"	

------------------------------------------------------------------------------------------------------
Electric Bill

0-200 = 5
200-500 8
> 5000 10

------------------------------------------------------------------------------------------------------
< 500000
800000 10
>1000000 20
-----------------------------------------------------------------------------------------------------



Nested if :

if(expression){
	if(){
	}
}

num?  + <100 2time else 3 times
      - <100 convert positive 2 time


-50


100


----------------------------------------------------------------------------------------------------
Iterative satements:

Entery control -> for, while
Exit control    -> do-while
	
---------------------------------------------------------------------------------------------------

for(initialization;condition;updation){
	---------------
	----------------
}

	while(expression){
		-----------
		-----------
	}


	for(int i = 1; i <= N; i++){

		System.out.println(i);
	}

	int i = 1;
	while(i <= N){

		System.out.prinln(i);
		i++;
	}


------------------------------------------------------------------------------------------------------

	int num = 1234
	int rnum = 4321

------------------------------------------------------------------------------------------------------153

1 ^ 3 + 5 ^ 3 + 3 ^ 3

1 + 125 + 27 = 153

do{

}while(condition);

---------------------------------------------------------------------------------------------------

Selection Statments:

if, if - else , if-else-if
switch

----------------------------------
	byte, short, int, String, enum : (float, double)
	switch(exp|var|value){
		
		case value:------;
			break;
		default:-----------
			
	}

------------------------------------------------------------------------------------------------------
	PUC
		BE/B.Tech
			CS
			IS
			EC
			EEE
       ATM:
		

--------------------------------------------------------------------------------------------------
functions:

	Collection group of statements which is going to perform a specific task

	
	access_specifier <modifier> returntype methodname(arg1,arg2){
		---------------
		return type;
	}


	int sumOfNnumbers(int n){
		
	}

Function/Method (Java)

1. With return type with arguments

	int sum(int a, int b){
		return a + b;	
	}

2. With return type with out arguments

	int getCurrentMonth(){
		// Logic
	}

3. With out return type with arguments

	void printTable(int N){
		//Logic
	}

4. No retrun type no arguments
	
	void showTime(){
		// Logic
	}





String:
  
	java.lang
	Immutable object

	String name = "Core Java";
	String name = new String("Core Java");
	


	== Operator compares references 
	equals() method compares object content

Format code : ctrl + shift +  f
To delete line : ctrl + d
move selected : ALT + up-arrow	
comments:

------------------------------------------------------------------------------------------------------
data = "Lakshman,Krishna,Nareen,Basha,Suresh,Mahesh,Jayesh,Ramesh";
-------------------------------------------------------------------------------------------------


String: Immutable

Muttable:
	StringBuffer  
	StringBuilder 1.5 

Every class super class Object: java.lang


		class1  extends 

			m1()
			m2()
			equals()
			toString()
			hashCode()
			clone()
		class2 extends class1
			m3()

		equals(){



		}

<html>
<head>
<title>Welcome to HTML</title>
<head>
<body>
 	<h1>This is my first HTML example</h1>
</body>
</html>
	



-----------------------------------------------------------------------------------------------------

public 
private 
protected
(default)

private > (default) > protected > public 

IS-A     => I am an Employee 
HAS-A    => I have Bike

                           Shape
		
		Circle

Employee extends Person

    Project
    Car


Constructor:

Overloading:

No of params
Order of params
Type of the params

-----------------------------------------------------------------------------------------------------
this  => Local, Instance variable if declared with same name then instance variable are going hide in the local scope to access instance variable we use "this"

this() => To call another constructor of the same class with different parameters we use "this()" 

Note: this();

------------------------------------------------------------------------------------------------------
Method:

name can be anythig:                            Name must be same as class
It must have return type                        There is no return type
Called any number of times	                Only once for the object
User can call method any number of time         Only JVM will invoke constructor by using new operator


1001-Think Pad-Lenovo-45000,1002-Studio-Dell-55000,1003-Air book-Apple-65000,1004-Next Gen-Dell-50

 ["1001-Think Pad-Lenovo-45000","1002-Studio-Dell-55000","1003-Air book-Apple-65000","1004-Next Gen-Dell-50"]

arr = ["1001","Think Pad","Lenovo","45000"]
arr[0]
--------------------------------------------------------------------------------------

static - Variables, Method, Blocks, imports  
final  - Variables, Method, Class
------------------

Instance
Class
Local 


------------------------------

IIB => Instance Initializer Block


Object Oriented Programming:

int regno[] = new int[100];
String names[] = new String[100];
int score[] = new int[100]

regno[1]= 1001
names[1] = "Nareen"
score[1] = 9


regno[2]= 1002
names[2] = "Krish"
score[2] = 8

Student{

	regno;
	name;
	score;
	
}

Student s1 = new Student(1001,"Nareen",9)

Class:

Blue print or template which contains common fields and methods 


Object:

An instance of the class is called Object.




class Book{

	String isbn;
	String title;
	String author;
	int pageCount;
	String publisher;
	
}

Constructor:

	1. Special method
	2. Name of the constructor must be same as class name
	3. It will not have any return type ( even void)
	4. It can not be called explicitly by the programmer
	5. It is called by JVM by using new operator
	6. In the absence of user defined constructor java compiler provides the 
	   default constructor ( in the .class file)
	7. The job of constructor is to initialize instance variable with the default values
	8. It is called only once for the object creation
	9. Class can have two or more constructors with different parameter list 
	   this is called constructor overloading
	10. Constructor overriding is not possible in Java.
	11. It can throw any exceptions
	


1. Number of parameters
2. Order of parameters
3. Type of parameters	
	


Object Oriented Programming:

	Class :
		Is blue print or a template which contains common fields and methods
		
	Object:
		An instance of the class is called Object
		
	Abstraction:
	   The process of hidding data and showing required features is called abstraction
	   
	Encapsulation:
	   The process of wrapping the data is encapsulation 
	   
	Inheritence: 
	   The process of creating a new class from the existing class is called 
	   Inheritence
	   
	Polymorphism: 
       Many forms, one method or one interface with different implementation is called polymorphism
       
       One method with different implementation is called polymorphism
       1. Overloading
       2. Overriding
       

       
IS - A     =>Inheritence
HAS - A    => having other class Object 

Java Supports:

Single Level
Multi Level

in the absence of extends keyword in the class declaration Java compiler will
extends java.lang.Object


-----------------------------------------------------------------------------------------------------------

Overloading:

Writing two or more method in the class with different parameter list is called overloading
	1. Number of parameters
	2. Order of parameters
	3. Type of parameters	
	
	// Return type, Access Specifier, Exception 

Overriding:

	Changing the super class method implementation in the sub class is called overriding
	
	
1. Overloading takes place in the same class
2. Overriding takes place in the sub class
	
	
1. Super class reference variable can hold sub class object
2. Sub class reference variable can not hold super class object

3.  By using super class reference variable we can access only super class methods and variable 


private > default > protected > public 

Rules :

1. Access specifier should same or less restrictive  it should not be more restrictive 
2. Return type must be same
3. Parameter list must be same

Note: We will discuss later
4. Return can be co-varient 
5. Excpetion should be same or without exception, but should not be parent (super) excpetion 


Type casting:

Converting one data type to another valid data type is called typecasting:
	1. Implicit  - Compiler 
	
		Upcasting > lower data type to heigher data type
		int a = 10;
		float b = a;
		
	2. Explicit  - Programmer
	    Downcasting > Higher data type to lower data type :( There is chances of loosing data)
	    
	    float a = 10.5f
	    int b = (int)a;
	
byte short char int float double long

Primitive and Reference:

byte
short
char
int 
long
float
double
boolean

Reference:

String name = new String("Lakshman")
Object obj = new Employee()
int arr[] = new int[]{1,2,3,4}


java.lang.Object => Root class for every java class

Wrapper class:

Boxing and un-boxing

Converting Primitive to Reference - Boxing
Reference to Primitive  - un-boxing

== References 
equals() => Compares the content of the object


Abstract:

abstract: keyword

			- class
			- method
			
Abstract class:
    abstract
	- class with zero or more abstract methods
	- Object can't be created
	- Reference variable can be created

Interface:
	It is contract between two parties, which contains:
    - Java 8 
     - Contains default methods and static method
     - Abstract methods
     - Only final variable 
     
Class can implement any number interfaces
Interface can extends any number interfaces

abstract class Vs Interface

- Functional 
- Marker Interface


What is Functional Interface:

	If interface has only one abstract method, then it is called functional interface.

Marker Interface:
    if an interface without any method and variable is called marker interface or tagging interface

Exceptions:
	
		Exception
		Error
		Bug
		
											Object
											
											Throwable
											
									Error              Exception
													
											     IOExcetion			RuntimeException
											                            
											                            NumberFormatExcetion
											                            NullPointerException
	Un-checked:
		The classes which extends RuntimeException class is called un-checked exception, these exception occurs during runtime
	Checked: 
		The classes which extends Exception class is called checked exception, these exception are know to the compiler, so developer
		needs handle or should throw to heighest stack caller by using throws keyword
		
	

Collections:
    Set
    List
    Map
    
    Lambdas
    Streams
    
Annotations

Reflection

Thread

JDBC


Immutable Object:

  Once object is created the content of the object can't be modified.
  
  String Immutable
  
   

     

1. What is immutable object ?
2. How do you create your object as immutable
3. Why do you need private constructor ?
4. What is singleton class how do you create singleton class?


5. Interface Vs Abstract class
  

6. Can interface extend multiple interfaces ?
	
7. What is the functional interface?
	
8. Interface 
          Country
             String getCurrrency()
          
   Impletement Inteface:
   		  USA
   		  UK
   		  India
   		  
   Create class CurrencyContainer: 
   		  private CurrencyContainer()
   		  getCournty(String country)
   		 
   Main:
   
   		  obj = getCurrency("IND");
   		   		sop(obj.getCurrency());  "Rupee" , "Dolar" , "Pound"
   		   		
9. Constructor vs Method?
   Constructor:
   	Special method, the job of the constructor is to initialize instance variable at the time creating the object.
   	Rules:
   		Constructor name must be same as class name
   		It shouldn't contain any return type
   		Access modifiers can't used ( static , native )
   		Is called by JVM at the creating object.
   		There is not inheritence 
   		
   	Method:
   		
   	
10. Static block vs IIB ?
    
    
    
    
11. Overloading Vs Overriding?

class A{
	void m1(){
		System.out.println("A"):
	}
}
class B extends A{
	void m1(){
		System.out.println("B");
	}
	void m1(int a){
	
	}
}
	
12.
	
	boolean isSubset(int bigarr[],int smallArr[]){
	}
	wheather smallArr is subset of bigarr or not, if yes print "Yes" otherwise "No"
 

13. What is inheritance ? does java supports multiple inheritance?

14. What is covarient type?

	Super class 
	Subclass 
	
	Object m1(){
	}
	
	String m1(){
	}

15. What is typecasting? What is auto boxing and unboxing?
16. 
	Write program to count number of palindromes in the given string:
	
	"123, 321, 12321,abc, abcbc, lamnmnl,3445 ,456, 678"
     
     
17. What are the Java features?
 
18. JDK, JVM, JRE

19. What are different distribution files in Java 

    jar, war, ear
    
20.

	int biggest(int a[]);
	int indexOf(int a[],int key) // What index the element is present -1
	int occurance(int a[], int key) // 
	int[] sort(int a[],String order)// Desc/ Aesc
	
21. Explain the OOP's concepts?
22. How do you make your class as singleton?
23. What is difference between this, super, this() vs super()
24.
    String getLastTwoDigtsOfArraysSum(int arr[]){
    
    		90 + 1110 + 134 => 65678  // 78
    						=> 12    // 12
    						=> 100   // 00 
    
    }




	